as.character(ames_validation$Bsmt.Exposure)))
ames_validation$BsmtFin.Type.1 <- as.factor(ifelse(is.na(ames_validation$BsmtFin.Type.1), "NoBsmt",
as.character(ames_validation$BsmtFin.Type.1)))
ames_validation$BsmtFin.Type.2 <- as.factor(ifelse(is.na(ames_validation$BsmtFin.Type.2), "NoBsmt",
as.character(ames_validation$BsmtFin.Type.2)))
ames_validation$Alley <- as.factor(ifelse(is.na(ames_validation$Alley), "NoAlley",
as.character(ames_validation$Alley)))
ames_validation$Fireplace.Qu <- as.factor(ifelse(is.na(ames_validation$Fireplace.Qu), "NoFireplace",
as.character(ames_validation$Fireplace.Qu)))
ames_validation$Pool.QC <- as.factor(ifelse(is.na(ames_validation$Pool.QC), "NoPool",
as.character(ames_validation$Pool.QC)))
ames_validation$Fence <- as.factor(ifelse(is.na(ames_validation$Fence), "NoFence",
as.character(ames_validation$Fence)))
ames_validation$Misc.Feature <- as.factor(ifelse(is.na(ames_validation$Misc.Feature), "NoMiscFea",
as.character(ames_validation$Misc.Feature)))
ames_validation <- ames_validation %>%
filter((MS.Zoning != "A (agr)") & (MS.Zoning != "I (all)") & !is.na(Bsmt.Full.Bath))
cat(sprintf("Data points in validation set: %d\n", nrow(ames_validation)))
predicted.valid <- exp(predict(model.5, ames_validation))
residuals.valid <- ames_validation$Price - predicted.valid
RMSE.valid <- sqrt(mean(residuals.valid^2))
overfit <- 1 - RMSE.train/RMSE.valid
cat(sprintf("model.5 (BIC tuned to reduce overfit):\n"),
sprintf("- Training set RMSE      %d\n", round(RMSE.train)),
sprintf("- Validation set RMSE    %d\n", round(RMSE.valid)),
sprintf("- Overfit                %.1f%%\n", 100 * overfit))
residuals <- data.frame(predict = predicted.valid, resid = residuals.valid)
ggplot(residuals, aes(x = predict, y = resid)) + geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Residuals versus predicted prices", x = "Predicted prices", y = "Residuals") +
theme(plot.title = element_text(hjust = 0.5))
which.min(residuals$predict)
View(ames_validation)
ames_validation$price[336]
ames_validation$Price[336]
ames_validation$Lot.Area[336]
ames_validation$Area[336]
ames_validation$Bedroom.AbvGr[336]
ames_validation$Full.Bath[336]
ames_validation$Garage.Cars[336]
ames_validation$Overall.Qual[336]
ames_validation$Overall.Cond[336]
ames_validation$Neighborhood[336]
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point()
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1)
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue")
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted price", y = "Actual price")
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted price", y = "Actual price")
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted", y = "Actual") +
theme(plot.title = element_text(hjust = 0.5)) +
over <- data.frame(predict = predicted.valid, actual = ames_validation$Price)
ggplot(over,aes(x=predict,y=actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted", y = "Actual") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "red") +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = log(Lot.Area), y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "red") +
labs(title = "Price versus log transformed lot area", x = "log(Lot.Area)", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ames_train <- ames_train %>% filter(Lot.Area < 159000)
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red") +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red") +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red") +
labs(title = "Price versus house area", x = "Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "blue") +
labs(title = "Price versus house area", x = "Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "blue") +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ames_train <- ames_train %>% filter(Lot.Area < 159000)
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "blue") +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = log(Lot.Area), y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "blue") +
labs(title = "Price versus log transformed lot area", x = "log(Lot.Area)", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "blue") +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
x <- actual_vs_predicted$predicted - actual_vs_actual
actual_vs_predicted <- data.frame(actual = ames_validation$Price, predicted = predicted.valid)
ggplot(actual_vs_predicted, aes(x = predicted, y = actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted", y = "Actual") +
theme(plot.title = element_text(hjust = 0.5))
x <- actual_vs_predicted$predicted - actual_vs_actual
x <- actual_vs_predicted$predicted - actual_vs_predicted$actual
x
y <- abs(x)
max(y)
which.max(y)
ames_evaluation$Price[641]
ames_validation$Price[641]
x$actaul[641]
x$actual[641]
actual_vs_predicted$actual[641]
actual_vs_predicted$predicted[641]
350719/441929
1-350719/441929
min(x)
which.min(x)
which.max(x)
actual_vs_predicted$predicted[168]
actual_vs_predicted$actual[168]
max(actual_vs_predicted$actual)
min(x)
which.min(x)
which.max(x)
min(x)
max(x)
ames_validation$Price[168]
actual_vs_predicted$predicted[168]
x = actual_vs_predicted$actual - actual_vs_predicted$predicted
min(x)
which.min(x)
actual_vs_predicted$actual[168]
actual_vs_predicted$predicted[168]
actual_vs_predicted$actual[168] - actual_vs_predicted$predicted[168]
actual_vs_predicted$predicted[168]
actual_vs_predicted$actual[168]
which.max(x)
actual_vs_predicted$actual[641]
actual_vs_predicted$predicted[641]
350719/441929
1-350719/441929
actual_vs_predicted$predicted[168]
actual_vs_predicted$actual[168]
275000/364894.5
1-275000/364894.5
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "blue", size = 1) +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "blue", size = 3) +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "blue", size = 0.5) +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
<h4>Location</h4>
<h4>Type of house</h4>
<h4>Type of house</h4>
library(dplyr)
library(ggplot2)
library(statsr)
library(formattable)
library(GGally)
library(MASS)
# Load the training data
load("ames_train.Rdata")
str(ames_train)
ames_train$Overall.Qual  <- as.factor(ames_train$Overall.Qual)
ames_train$Overall.Cond  <- as.factor(ames_train$Overall.Cond)
ames_train <- ames_train %>% dplyr::rename(Price = price, Area = area)
ames_train <- mutate(ames_train, Age = 2010 - Year.Built)
ames_train <- ames_train %>% filter(Sale.Condition == "Normal")
cat(sprintf("Data points in training set: %d\n", nrow(ames_train)))
na_count <- sapply(ames_train, function(x) sum(is.na(x)))
na <- as.data.frame(na_count)
na <- data.frame(Variable=rownames(na), Missing=na$na_count)
na
ames_train$Garage.Type <- as.factor(ifelse(is.na(ames_train$Garage.Type), "NoGarage",
as.character(ames_train$Garage.Type)))
ames_train$Garage.Finish <- as.factor(ifelse(is.na(ames_train$Garage.Finish), "NoGarage",
as.character(ames_train$Garage.Finish)))
ames_train$Garage.Qual <- as.factor(ifelse(is.na(ames_train$Garage.Qual), "NoGarage",
as.character(ames_train$Garage.Qual)))
ames_train$Garage.Cond <- as.factor(ifelse(is.na(ames_train$Garage.Cond), "NoGarage",
as.character(ames_train$Garage.Cond)))
ames_train$Bsmt.Qual <- as.factor(ifelse(is.na(ames_train$Bsmt.Qual), "NoBsmt",
as.character(ames_train$Bsmt.Qual)))
ames_train$Bsmt.Cond <- as.factor(ifelse(is.na(ames_train$Bsmt.Cond), "NoBsmt",
as.character(ames_train$Bsmt.Cond)))
ames_train$Bsmt.Exposure <- as.factor(ifelse(is.na(ames_train$Bsmt.Exposure), "NoBsmt",
as.character(ames_train$Bsmt.Exposure)))
ames_train$BsmtFin.Type.1 <- as.factor(ifelse(is.na(ames_train$BsmtFin.Type.1), "NoBsmt",
as.character(ames_train$BsmtFin.Type.1)))
ames_train$BsmtFin.Type.2 <- as.factor(ifelse(is.na(ames_train$BsmtFin.Type.2), "NoBsmt",
as.character(ames_train$BsmtFin.Type.2)))
ames_train$Alley <- as.factor(ifelse(is.na(ames_train$Alley), "NoAlley",
as.character(ames_train$Alley)))
ames_train$Fireplace.Qu <- as.factor(ifelse(is.na(ames_train$Fireplace.Qu), "NoFireplace",
as.character(ames_train$Fireplace.Qu)))
ames_train$Pool.QC <- as.factor(ifelse(is.na(ames_train$Pool.QC), "NoPool",
as.character(ames_train$Pool.QC)))
ames_train$Fence <- as.factor(ifelse(is.na(ames_train$Fence), "NoFence",
as.character(ames_train$Fence)))
ames_train$Misc.Feature <- as.factor(ifelse(is.na(ames_train$Misc.Feature), "NoMiscFea",
as.character(ames_train$Misc.Feature)))
neighborhoods <- ames_train %>% dplyr::select(Neighborhood, MS.Zoning)
zoning <- neighborhoods %>% group_by(Neighborhood) %>% group_by(MS.Zoning) %>% table()
zoning <- as.data.frame.matrix(zoning)
# We have no data point for neighborhood "Landmrk", so we delete it.
zoning <- zoning[-c(13),]
# Compute number of properties, price median and standard deviation for each neighborhood
stats <- ames_train %>% group_by(Neighborhood) %>%
summarise(
Properties = n(),
Price.Median = median(Price),
Price.Sd = sd(Price))
neighborhood_stats <- data.frame(
Neighborhood = rownames(zoning),
Properties = stats$Properties,
Price.Median = round(stats$Price.Median),
Price.sd = round(stats$Price.Sd),
RL = zoning$RL,
RM = zoning$RM,
RH = zoning$RH,
FV = zoning$FV,
C  = zoning$`C (all)`,
I  = zoning$`I (all)`,
A  = zoning$`A (agr)`)
colnames(neighborhood_stats) <-
c("Neighborhood", "Properties", "Price Median", "Price Sd",
"Residential Low Density", "Residential Medium Density", "Residential High Density",
"Floating Village Residential", "Commercial", "Industrial", "Agriculture")
# Order neighborhooods by decreasing price median values
neighborhood_stats <- neighborhood_stats[order(neighborhood_stats[,3], decreasing=TRUE),]
formattable(neighborhood_stats, align="c", row.names=FALSE)
ggplot(ames_train, aes(x = Neighborhood, y = Price)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Property prices by neighborhood", x = "Neighborhood", y = "Price") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
stats <- ames_train %>% group_by(Neighborhood) %>%
summarise(
Properties = n(),
Age.Median = median(Age),
Age.Sd = sd(Age))
neighborhood_stats <- data.frame(
Neighborhood = rownames(zoning),
Properties = stats$Properties,
Age.Median = round(stats$Age.Median),
Age.Sd = round(stats$Age.Sd),
RL = zoning$RL,
RM = zoning$RM,
RH = zoning$RH,
FV = zoning$FV,
C  = zoning$`C (all)`,
I  = zoning$`I (all)`,
A  = zoning$`A (agr)`)
colnames(neighborhood_stats) <-
c("Neighborhood", "Properties", "Age Median", "Age Sd",
"Residential Low Density", "Residential Medium Density", "Residential High Density",
"Floating Village Residential", "Commercial", "Industrial", "Agriculture")
# Order neighborhoods by increasing age median values
neighborhood_stats <- neighborhood_stats[order(neighborhood_stats[,3], decreasing=FALSE),]
formattable(neighborhood_stats, align="c", row.names=FALSE)
ggplot(ames_train, aes(x = Neighborhood, y = Age)) +
geom_boxplot(fill="lightblue") +
labs(title = "Property ages by neighborhood", x = "Neighborhood", y = "Age") +
theme(plot.title = element_text(hjust = 0.5)) +
coord_flip()
ggplot(ames_train, aes(x = Price)) +
geom_histogram(bins=30, color="black", fill="lightblue") +
labs(title = "Price variable distribution", x = "Price", y = "Count") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = log(Price))) +
geom_histogram(bins=30, color="black", fill="lightblue") +
labs(title = "Distribution of log transformed Price", x = "log(Price)", y = "Count") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(sample = log(Price))) + stat_qq() + stat_qq_line(color="red") +
labs(title = "Q-Q plot of log transformed Price") +
theme(plot.title=element_text(hjust = 0.5))
ames_train <- ames_train %>% filter((Price > 45000))
correlations <- ames_train %>% dplyr::select(Area, Lot.Area, Age)
ggpairs(correlations)
ggplot(ames_train, aes(x = Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red", size = 0.5) +
labs(title = "Price versus house area", x = "Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red", size = 0.5) +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title = element_text(hjust = 0.5))
ames_train <- ames_train %>% filter(Lot.Area < 159000)
ggplot(ames_train, aes(x = Lot.Area, y = log(Price))) + geom_point() +
geom_smooth(formula = "y ~ x", method = "lm", se = FALSE, color = "red", size = 0.5) +
labs(title = "Price versus lot area", x = "Lot.Area", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = log(Lot.Area), y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "red", size = 0.5) +
labs(title = "Price versus log transformed lot area", x = "log(Lot.Area)", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
ggplot(ames_train, aes(x = Age, y = log(Price))) + geom_point() +
geom_smooth(formula="y ~ x", method = "lm", se = FALSE, color = "red", size = 0.5) +
labs(title = "Price versus age", x = "Age", y = "log(Price)") +
theme(plot.title=element_text(hjust = 0.5))
model.1 <- lm(data = ames_train,
log(Price) ~
Area +
log(Lot.Area) +
Age +
Neighborhood +
Bldg.Type +
Bedroom.AbvGr +
Garage.Cars +
Overall.Qual +
Overall.Cond +
Total.Bsmt.SF)
summary(model.1)
model.2 <- lm(data = ames_train,
log(Price) ~
Area +
log(Lot.Area) +
Age +
Neighborhood +
Bldg.Type +
House.Style +
Bedroom.AbvGr +
Garage.Cars +
Garage.Type +
Garage.Area +
Overall.Qual +
Overall.Cond +
Exter.Qual +
Exter.Cond +
Total.Bsmt.SF +
BsmtFin.SF.1 +
BsmtFin.SF.2 +
Bsmt.Qual +
Bsmt.Cond +
Bsmt.Full.Bath +
Bsmt.Half.Bath +
Heating +
Heating.QC +
Central.Air
)
summary(model.2)
model.3 <- stepAIC(model.2, k = 2, trace = FALSE)
summary(model.3)
model.4 <- stepAIC(model.2, k = log(nrow(ames_train)), trace = FALSE)
summary(model.4)
residuals <- data.frame(resid = resid(model.4), fitted = fitted(model.4))
ggplot(residuals, aes(sample = resid)) + stat_qq() + stat_qq_line(color="red") +
labs(title = "Q-Q plot of residuals") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(residuals, aes(x = fitted, y = resid)) + geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Residuals versus fitted values", x = "Fitted values", y = "Residuals") +
theme(plot.title = element_text(hjust = 0.5))
predict.CI <- exp(predict(model.4, ames_train, interval = "prediction"))
covprob <- mean(ames_train$Price > predict.CI[,"lwr"] & ames_train$Price < predict.CI[,"upr"])
cat(sprintf("model.4 (BIC) coverage probability: %.3f\n", covprob))
load("ames_test.Rdata")
ames_test$Overall.Qual  <- as.factor(ames_test$Overall.Qual)
ames_test$Overall.Cond  <- as.factor(ames_test$Overall.Cond)
ames_test <- ames_test %>% dplyr::rename(Price = price, Area = area)
ames_test <- mutate(ames_test, Age = 2010 - Year.Built)
ames_test <- ames_test %>% filter(Sale.Condition == "Normal")
ames_test$Garage.Type <- as.factor(ifelse(is.na(ames_test$Garage.Type), "NoGarage",
as.character(ames_test$Garage.Type)))
ames_test$Garage.Finish <- as.factor(ifelse(is.na(ames_test$Garage.Finish), "NoGarage",
as.character(ames_test$Garage.Finish)))
ames_test$Garage.Qual <- as.factor(ifelse(is.na(ames_test$Garage.Qual), "NoGarage",
as.character(ames_test$Garage.Qual)))
ames_test$Garage.Cond <- as.factor(ifelse(is.na(ames_test$Garage.Cond), "NoGarage",
as.character(ames_test$Garage.Cond)))
ames_test$Bsmt.Qual <- as.factor(ifelse(is.na(ames_test$Bsmt.Qual), "NoBsmt",
as.character(ames_test$Bsmt.Qual)))
ames_test$Bsmt.Cond <- as.factor(ifelse(is.na(ames_test$Bsmt.Cond), "NoBsmt",
as.character(ames_test$Bsmt.Cond)))
ames_test$Bsmt.Exposure <- as.factor(ifelse(is.na(ames_test$Bsmt.Exposure), "NoBsmt",
as.character(ames_test$Bsmt.Exposure)))
ames_test$BsmtFin.Type.1 <- as.factor(ifelse(is.na(ames_test$BsmtFin.Type.1), "NoBsmt",
as.character(ames_test$BsmtFin.Type.1)))
ames_test$BsmtFin.Type.2 <- as.factor(ifelse(is.na(ames_test$BsmtFin.Type.2), "NoBsmt",
as.character(ames_test$BsmtFin.Type.2)))
ames_test$Alley <- as.factor(ifelse(is.na(ames_test$Alley), "NoAlley",
as.character(ames_test$Alley)))
ames_test$Fireplace.Qu <- as.factor(ifelse(is.na(ames_test$Fireplace.Qu), "NoFireplace",
as.character(ames_test$Fireplace.Qu)))
ames_test$Pool.QC <- as.factor(ifelse(is.na(ames_test$Pool.QC), "NoPool",
as.character(ames_test$Pool.QC)))
ames_test$Fence <- as.factor(ifelse(is.na(ames_test$Fence), "NoFence",
as.character(ames_test$Fence)))
ames_test$Misc.Feature <- as.factor(ifelse(is.na(ames_test$Misc.Feature), "NoMiscFea",
as.character(ames_test$Misc.Feature)))
ames_test <- ames_test %>% filter((Neighborhood != "Landmrk") & (Overall.Qual != 1))
cat(sprintf("Data points in test set: %d\n", nrow(ames_test)))
predicted.train <- exp(predict(model.4, ames_train))
residuals.train <- ames_train$Price - predicted.train
RMSE.train <- sqrt(mean(residuals.train^2))
predicted.test <- exp(predict(model.4, ames_test))
residuals.test <- ames_test$Price - predicted.test
RMSE.test <- sqrt(mean(residuals.test^2))
overfit <- 1 - RMSE.train/RMSE.test
cat(sprintf("model.4 (BIC):\n"),
sprintf("- Training set RMSE  %d\n", round(RMSE.train)),
sprintf("- Test set RMSE      %d\n", round(RMSE.test)),
sprintf("- Overfit            %.1f%%\n", 100 * overfit))
model.5 <- lm(data = ames_train,
log(Price) ~
Area +
log(Lot.Area) +
Age +
MS.Zoning +
Condition.1 +
Bldg.Type +
Garage.Cars +
Overall.Qual +
Overall.Cond +
Total.Bsmt.SF +
BsmtFin.SF.1 +
Bsmt.Full.Bath +
Central.Air)
summary(model.5)
predicted.train <- exp(predict(model.5, ames_train))
residuals.train <- ames_train$Price - predicted.train
RMSE.train <- sqrt(mean(residuals.train^2))
predicted.test <- exp(predict(model.5, ames_test))
residuals.test <- ames_test$Price - predicted.test
RMSE.test <- sqrt(mean(residuals.test^2))
overfit <- 1 - RMSE.train/RMSE.test
cat(sprintf("model.5 (BIC tuned to reduce overfit):\n"),
sprintf("- Training set RMSE  %d\n", round(RMSE.train)),
sprintf("- Test set RMSE      %d\n", round(RMSE.test)),
sprintf("- Overfit            %.1f%%\n", 100 * overfit))
load("ames_validation.Rdata")
ames_validation$Overall.Qual  <- as.factor(ames_validation$Overall.Qual)
ames_validation$Overall.Cond  <- as.factor(ames_validation$Overall.Cond)
ames_validation <- ames_validation %>% dplyr::rename(Price = price, Area = area)
ames_validation <- mutate(ames_validation, Age = 2010 - Year.Built)
ames_validation <- ames_validation %>% filter(Sale.Condition == "Normal")
ames_validation$Garage.Type <- as.factor(ifelse(is.na(ames_validation$Garage.Type), "NoGarage",
as.character(ames_validation$Garage.Type)))
ames_validation$Garage.Finish <- as.factor(ifelse(is.na(ames_validation$Garage.Finish), "NoGarage",
as.character(ames_validation$Garage.Finish)))
ames_validation$Garage.Qual <- as.factor(ifelse(is.na(ames_validation$Garage.Qual), "NoGarage",
as.character(ames_validation$Garage.Qual)))
ames_validation$Garage.Cond <- as.factor(ifelse(is.na(ames_validation$Garage.Cond), "NoGarage",
as.character(ames_validation$Garage.Cond)))
ames_validation$Bsmt.Qual <- as.factor(ifelse(is.na(ames_validation$Bsmt.Qual), "NoBsmt",
as.character(ames_validation$Bsmt.Qual)))
ames_validation$Bsmt.Cond <- as.factor(ifelse(is.na(ames_validation$Bsmt.Cond), "NoBsmt",
as.character(ames_validation$Bsmt.Cond)))
ames_validation$Bsmt.Exposure <- as.factor(ifelse(is.na(ames_validation$Bsmt.Exposure), "NoBsmt",
as.character(ames_validation$Bsmt.Exposure)))
ames_validation$BsmtFin.Type.1 <- as.factor(ifelse(is.na(ames_validation$BsmtFin.Type.1), "NoBsmt",
as.character(ames_validation$BsmtFin.Type.1)))
ames_validation$BsmtFin.Type.2 <- as.factor(ifelse(is.na(ames_validation$BsmtFin.Type.2), "NoBsmt",
as.character(ames_validation$BsmtFin.Type.2)))
ames_validation$Alley <- as.factor(ifelse(is.na(ames_validation$Alley), "NoAlley",
as.character(ames_validation$Alley)))
ames_validation$Fireplace.Qu <- as.factor(ifelse(is.na(ames_validation$Fireplace.Qu), "NoFireplace",
as.character(ames_validation$Fireplace.Qu)))
ames_validation$Pool.QC <- as.factor(ifelse(is.na(ames_validation$Pool.QC), "NoPool",
as.character(ames_validation$Pool.QC)))
ames_validation$Fence <- as.factor(ifelse(is.na(ames_validation$Fence), "NoFence",
as.character(ames_validation$Fence)))
ames_validation$Misc.Feature <- as.factor(ifelse(is.na(ames_validation$Misc.Feature), "NoMiscFea",
as.character(ames_validation$Misc.Feature)))
ames_validation <- ames_validation %>%
filter((MS.Zoning != "A (agr)") & (MS.Zoning != "I (all)") & !is.na(Bsmt.Full.Bath))
cat(sprintf("Data points in validation set: %d\n", nrow(ames_validation)))
predicted.valid <- exp(predict(model.5, ames_validation))
residuals.valid <- ames_validation$Price - predicted.valid
RMSE.valid <- sqrt(mean(residuals.valid^2))
overfit <- 1 - RMSE.train/RMSE.valid
cat(sprintf("model.5 (BIC tuned to reduce overfit):\n"),
sprintf("- Training set RMSE      %d\n", round(RMSE.train)),
sprintf("- Validation set RMSE    %d\n", round(RMSE.valid)),
sprintf("- Overfit                %.1f%%\n", 100 * overfit))
actual_vs_predicted <- data.frame(actual = ames_validation$Price, predicted = predicted.valid)
ggplot(actual_vs_predicted, aes(x = predicted, y = actual)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Predicted price versus actual price") +
labs(x = "Predicted", y = "Actual") +
theme(plot.title = element_text(hjust = 0.5))
load("~/Guy/AI/housing_data_analysis/src/ames_test.Rdata")
load("~/Guy/AI/housing_data_analysis/src/ames_test.Rdata")
load("C:/Users/gdupe/Documents/Guy/AI/housing_data_analysis/src/ames_test.Rdata")
